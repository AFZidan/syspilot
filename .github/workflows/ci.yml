name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # Required for uploading SARIF results
  actions: read

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Code Quality and Linting
  lint-and-format:
    name: "[CHECK] Code Quality & Linting"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: "[CHECKOUT] Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "[PYTHON] Set up Python"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: "[INSTALL] Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # For linting job, we need dev dependencies but can be more selective
        pip install black>=23.12.0 isort>=5.13.0 flake8>=6.1.0 pylint>=3.0.0 bandit>=1.7.5

    - name: "[CHECK] Run Black (Code Formatting)"
      run: |
        black --check --diff .
      continue-on-error: false

    - name: "[CHECK] Run isort (Import Sorting)"
      run: |
        isort --check-only --diff .
      continue-on-error: false

    - name: "[CHECK] Run flake8 (Linting)"
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: "[CHECK] Run pylint (Advanced Linting)"
      run: |
        pylint syspilot/ --exit-zero --output-format=text --reports=yes
      continue-on-error: true

    - name: "[CHECK] Run bandit (Security Check)"
      run: |
        bandit -r syspilot/ -f json -o bandit-report.json || true
        bandit -r syspilot/ --severity-level medium
      continue-on-error: true

    - name: "[UPLOAD] Upload Bandit Report"
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  # Job 2: Type Checking
  type-check:
    name: "[CHECK] Type Checking"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: "[CHECKOUT] Checkout Code"
      uses: actions/checkout@v4

    - name: "[PYTHON] Set up Python"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: "[INSTALL] Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # For type checking, we only need mypy and type stubs
        pip install mypy>=1.8.0 types-requests>=2.31.0 types-psutil>=5.9.0 types-Pillow>=10.0.0

    - name: "[CHECK] Run mypy (Type Checking)"
      run: |
        mypy syspilot/ --ignore-missing-imports --show-error-codes
      continue-on-error: true

  # Job 3: Tests
  test:
    name: "[TEST] Tests"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: "[CHECKOUT] Checkout Code"
      uses: actions/checkout@v4

    - name: "[PYTHON] Set up Python ${{ matrix.python-version }}"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: "[DISPLAY] Setup Display (for Qt tests)"
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: "[INSTALL] Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

        # Install development dependencies with Python version compatibility
        if [[ "${{ matrix.python-version }}" == "3.8" ]]; then
          # Use Python 3.8 compatible requirements file
          pip install -r requirements-dev-py38.txt
          echo "[SUCCESS] Installed Python 3.8 compatible development dependencies"
        else
          # Python 3.9+ can use all packages from requirements-dev.txt
          pip install -r requirements-dev.txt
          echo "[SUCCESS] Installed full development dependencies for Python ${{ matrix.python-version }}"
        fi

    - name: "[TEST] Run pytest"
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: offscreen
      run: |
        pytest tests/ -v --cov=syspilot --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: "[UPLOAD] Upload Coverage to Codecov"
      uses: codecov/codecov-action@v5
      if: matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: "[UPLOAD] Upload Coverage Report"
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.9'
      with:
        name: coverage-report
        path: htmlcov/

  # Job 4: Build Test
  build:
    name: "[BUILD] Build Test"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [lint-and-format, test]

    steps:
    - name: "[CHECKOUT] Checkout Code"
      uses: actions/checkout@v4

    - name: "[PYTHON] Set up Python"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: "[INSTALL] Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        pip install -r requirements.txt

    - name: "[BUILD] Build Package"
      run: |
        python -m build

    - name: "[UPLOAD] Upload Build Artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  # Job 5: Cross-Platform Test
  cross-platform-test:
    name: "[PLATFORM] Cross-Platform Test"
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9']

    steps:
    - name: "[CHECKOUT] Checkout Code"
      uses: actions/checkout@v4

    - name: "[PYTHON] Set up Python ${{ matrix.python-version }}"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: "[DISPLAY] Setup Display (Linux)"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: "[INSTALL] Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: "[TEST] Basic Import Test"
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: offscreen
      shell: bash
      run: |
        python -c "
        try:
            import syspilot
            from syspilot.platforms import get_platform
            from syspilot.platforms.factory import PlatformFactory

            platform_name = get_platform()

            print(f'[SUCCESS] SysPilot imports successfully on {platform_name}')
            print(f'[SUCCESS] Platform factory available with supported platforms: {PlatformFactory.get_supported_platforms()}')
            print(f'[SUCCESS] Current platform supported: {PlatformFactory.is_current_platform_supported()}')
        except Exception as e:
            print(f'[FAILED] Import failed: {e}')
            import traceback
            traceback.print_exc()
            exit(1)
        "

  # Job 6: PR Requirements Check
  pr-requirements:
    name: "[CHECK] PR Requirements Check"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: "[CHECKOUT] Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "[CHECK] Check PR Title Format"
      run: |
        title="${{ github.event.pull_request.title }}"
        if [[ "$title" =~ ^(feat|fix|docs|style|refactor|test|chore|ci|perf|build)(\(.+\))?: .+ ]]; then
          echo "[SUCCESS] PR title follows conventional commit format"
        else
          echo "[FAILED] PR title must follow format: type(scope): description"
          echo "Examples: feat(ui): add new dashboard widget"
          echo "          fix(auth): resolve login timeout issue"
          echo "          docs: update installation guide"
          exit 1
        fi

    - name: "[CHECK] Check PR Description"
      run: |
        description="${{ github.event.pull_request.body }}"
        if [[ ${#description} -lt 50 ]]; then
          echo "[FAILED] PR description must be at least 50 characters"
          exit 1
        else
          echo "[SUCCESS] PR description is adequate"
        fi

    - name: "[CHECK] Check Changed Files"
      run: |
        changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
        echo "Changed files:"
        echo "$changed_files"

        # Check if tests are updated for new features
        if echo "$changed_files" | grep -E "syspilot/.*\.py$" && ! echo "$changed_files" | grep -E "tests/.*\.py$"; then
          echo "[WARNING] Warning: Code changes detected but no test updates found"
          echo "Consider adding or updating tests for your changes"
        fi

    - name: "[CHECK] Check for Breaking Changes"
      run: |
        changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
        breaking_patterns="syspilot/core/app.py|syspilot/platforms/factory.py|main.py"

        if echo "$changed_files" | grep -E "$breaking_patterns"; then
          echo "[WARNING] Critical files modified - ensure backward compatibility"
          echo "Files that may introduce breaking changes:"
          echo "$changed_files" | grep -E "$breaking_patterns"
        fi

  # Job 7: Security Scan
  security:
    name: "[SECURITY] Security Scan"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: "[CHECKOUT] Checkout Code"
      uses: actions/checkout@v4

    - name: "[SECURITY] Run Trivy vulnerability scanner"
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: "[UPLOAD] Upload Trivy scan results"
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Summary Job
  ci-success:
    name: "[SUCCESS] CI Success"
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, test, build, cross-platform-test, pr-requirements, security]
    if: always() && github.event.pull_request.draft == false

    steps:
    - name: "[ANALYSIS] Check All Jobs Status"
      run: |
        # Check core jobs that always run
        if [[ "${{ needs.lint-and-format.result }}" == "success" &&
              "${{ needs.type-check.result }}" == "success" &&
              "${{ needs.test.result }}" == "success" &&
              "${{ needs.build.result }}" == "success" &&
              "${{ needs.cross-platform-test.result }}" == "success" &&
              "${{ needs.security.result }}" == "success" ]]; then
          
          # Check PR-specific job only if it was supposed to run
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ needs.pr-requirements.result }}" == "success" ]]; then
              echo "[SUCCESS] All CI checks passed (including PR requirements)!"
            else
              echo "[FAILED] PR requirements check failed: ${{ needs.pr-requirements.result }}"
              exit 1
            fi
          else
            echo "[SUCCESS] All CI checks passed!"
          fi
        else
          echo "[FAILED] Some CI checks failed:"
          echo "Lint & Format: ${{ needs.lint-and-format.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Cross-Platform: ${{ needs.cross-platform-test.result }}"
          echo "PR Requirements: ${{ needs.pr-requirements.result }}"
          echo "Security: ${{ needs.security.result }}"
          exit 1
        fi
