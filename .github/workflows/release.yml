name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        default: 'v1.0.0'

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Create Release
  create-release:
    name: "[DEPLOY] Create Release"
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag }}

    steps:
    - name: "[CHECKOUT] Checkout Code"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "[VERSION] Get Version"
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: "[CREATE] Generate Changelog"
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          head -n 50 CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog=New release of SysPilot ${{ steps.get_version.outputs.tag }}" >> $GITHUB_OUTPUT
        fi

    - name: "[DEPLOY] Create Release"
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        release_name: SysPilot ${{ steps.get_version.outputs.tag }}
        body: |
          # SysPilot ${{ steps.get_version.outputs.tag }}

          ## [DEPLOY] What's New
          ${{ steps.changelog.outputs.changelog }}

          ## [INSTALL] Installation

          ### Quick Install (Linux)
          ```bash
          curl -sSL https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.tag }}/syspilot-linux.tar.gz | tar -xz
          sudo ./install.sh
          ```

          ### Manual Install
          1. Download the appropriate package for your platform
          2. Follow the installation instructions in the README.md

          ## [BUGS] Issues
          Report bugs at: https://github.com/${{ github.repository }}/issues
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.tag, 'rc') || contains(steps.get_version.outputs.tag, 'beta') || contains(steps.get_version.outputs.tag, 'alpha') }}

  # Build Cross-Platform Packages
  build-packages:
    name: "[BUILD] Build ${{ matrix.os }} Package"
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact: syspilot-linux.tar.gz
          - os: windows-latest
            platform: windows
            artifact: syspilot-windows.zip
          - os: macos-latest
            platform: macos
            artifact: syspilot-macos.tar.gz

    steps:
    - name: "[CHECKOUT] Checkout Code"
      uses: actions/checkout@v4

    - name: "[PYTHON] Set up Python"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: "[INSTALL] Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: "[BUILD] Build Executable (Linux/macOS)"
      if: matrix.platform != 'windows'
      run: |
        pyinstaller --onefile --windowed --name syspilot \
          --add-data "assets:assets" \
          --add-data "syspilot:syspilot" \
          main.py

    - name: "[BUILD] Build Executable (Windows)"
      if: matrix.platform == 'windows'
      run: |
        pyinstaller --onefile --windowed --name syspilot.exe \
          --add-data "assets;assets" \
          --add-data "syspilot;syspilot" \
          main.py

    - name: "[INSTALL] Create Package (Linux/macOS)"
      if: matrix.platform != 'windows'
      run: |
        mkdir -p package/syspilot
        cp dist/syspilot package/syspilot/
        cp -r assets package/syspilot/
        cp README.md LICENSE package/syspilot/
        cp install.sh package/syspilot/
        cd package
        tar -czf ${{ matrix.artifact }} syspilot/

    - name: "[INSTALL] Create Package (Windows)"
      if: matrix.platform == 'windows'
      run: |
        mkdir package\syspilot
        copy dist\syspilot.exe package\syspilot\
        xcopy assets package\syspilot\assets\ /E /I
        copy README.md package\syspilot\
        copy LICENSE package\syspilot\
        cd package
        powershell Compress-Archive -Path syspilot -DestinationPath ${{ matrix.artifact }}

    - name: "[UPLOAD] Upload Release Asset"
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: package/${{ matrix.artifact }}
        asset_name: ${{ matrix.artifact }}
        asset_content_type: application/octet-stream

  # PyPI Release
  pypi-release:
    name: "[INSTALL] PyPI Release"
    runs-on: ubuntu-latest
    needs: create-release
    if: github.repository_owner == 'your-username' # Replace with actual username

    steps:
    - name: "[CHECKOUT] Checkout Code"
      uses: actions/checkout@v4

    - name: "[PYTHON] Set up Python"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: "[INSTALL] Install Build Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: "[BUILD] Build Package"
      run: python -m build

    - name: "[CHECK] Check Package"
      run: twine check dist/*

    - name: "[UPLOAD] Publish to PyPI"
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
